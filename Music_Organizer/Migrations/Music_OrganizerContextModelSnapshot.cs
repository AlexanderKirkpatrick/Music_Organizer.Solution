// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Music_Organizer.Models;

namespace Music_Organizer.Migrations
{
    [DbContext(typeof(Music_OrganizerContext))]
    partial class Music_OrganizerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Music_Organizer.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AlbumOwned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AlbumId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Music_Organizer.Models.AlbumArtist", b =>
                {
                    b.Property<int>("AlbumArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("AlbumArtistId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("AlbumArtist");
                });

            modelBuilder.Entity("Music_Organizer.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Music_Organizer.Models.Medium", b =>
                {
                    b.Property<int>("MediumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("ArtistId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MediumId");

                    b.ToTable("Mediums");
                });

            modelBuilder.Entity("Music_Organizer.Models.MediumAlbum", b =>
                {
                    b.Property<int>("MediumAlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("MediumId")
                        .HasColumnType("int");

                    b.HasKey("MediumAlbumId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("MediumId");

                    b.ToTable("MediumAlbum");
                });

            modelBuilder.Entity("Music_Organizer.Models.MediumArtist", b =>
                {
                    b.Property<int>("MediumArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("MediumId")
                        .HasColumnType("int");

                    b.HasKey("MediumArtistId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("MediumId");

                    b.ToTable("MediumArtist");
                });

            modelBuilder.Entity("Music_Organizer.Models.AlbumArtist", b =>
                {
                    b.HasOne("Music_Organizer.Models.Album", "Album")
                        .WithMany("JoinEntities")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Music_Organizer.Models.Artist", "Artist")
                        .WithMany("JoinEntities")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Music_Organizer.Models.MediumAlbum", b =>
                {
                    b.HasOne("Music_Organizer.Models.Album", "Album")
                        .WithMany("JoinMediumAlbum")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Music_Organizer.Models.Medium", "Medium")
                        .WithMany("JoinMediumAlbum")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Medium");
                });

            modelBuilder.Entity("Music_Organizer.Models.MediumArtist", b =>
                {
                    b.HasOne("Music_Organizer.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Music_Organizer.Models.Medium", "Medium")
                        .WithMany("JoinEntities")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Medium");
                });

            modelBuilder.Entity("Music_Organizer.Models.Album", b =>
                {
                    b.Navigation("JoinEntities");

                    b.Navigation("JoinMediumAlbum");
                });

            modelBuilder.Entity("Music_Organizer.Models.Artist", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("Music_Organizer.Models.Medium", b =>
                {
                    b.Navigation("JoinEntities");

                    b.Navigation("JoinMediumAlbum");
                });
#pragma warning restore 612, 618
        }
    }
}
